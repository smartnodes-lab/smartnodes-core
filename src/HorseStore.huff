#define function updateHorseNumber(uint256) nonpayable returns()
#define function readNumberOfHorses() view returns (uint256)

#define constant NUMBER_OF_HORSES_STORAGE_SLOT = FREE_STORAGE_POINTER()

#define macro MAIN() = takes(0) returns (0) {
    0x00            // Push 0
    calldataload    // Load calldata
    0xe0            // Push 224 bits
    shr             // Shift to right by 224 bits to get first 32 bits of calldata (ie function selector)
    dup1            // Duplicate whats on the stack (function selector)

    __FUNC_SIG(updateHorseNumber)      // updateHorseNumber(uint256) function selector
    eq              // check if function selector matches
    updateJump      // update program counter, returns true/false (1/0)
    jumpi           // jump if match
    
    __FUNC_SIG(readNumberOfHorses)
    eq
    readJump
    jumpi

    0x00 0x00 revert

    updateJump:
        SET_NUMBER_OF_HORSES()
    
    readJump:
        GET_NUMBER_OF_HORSES()
}

#define macro SET_NUMBER_OF_HORSES() = takes(0) returns (0) {
    0x04                                // we want to get rid of the first 4 bytes of calldata (ie function selector)
    calldataload
    [NUMBER_OF_HORSES_STORAGE_SLOT]
    sstore
    stop
}

#define macro GET_NUMBER_OF_HORSES() = takes(0) returns (0) {
    [NUMBER_OF_HORSES_STORAGE_SLOT] // [key]
    sload                           // [value]
    0x00                            // [0, value]
    mstore                          // []           // Memory: [value]
    
    0x20 0x00 return
}